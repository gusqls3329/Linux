bash shell : bash -c '명령어'

bash -c 'mkdir {A,B,C}' : A, B, C 각각의 디렉토리가 만들어짐
 
1. pwd : 경로 / 디렉토리를 출력하는 명력어

2. mkdir : 현재 위치에 새로운 디렉토리 만드는 명령어 

3. redir : 특정 디렉토리를 삭제하는 명령어 (빈 디렉토리만 가능)

4. rm : 파일/디렉토리 삭제하는 명령어

- 삭제 시 복구할 수 없다.
- 즉시 삭제하기 때문에 주의가 필요

1) rm *.txt : 와일드카드 기호(*)를 이용해서 해당되는 확장자 파일들을 한번에 삭제

2) rm -r [디렉토리] : 디렉토리를 삭제할 때에는 꼭 -r 옵션을 넣어주어야 함, 디렉토리 내부의 모든 내용 삭제 (하위 디렉토리, 내부 파일들 모두 삭제됨)

명령어	설명
-f	강제로 파일이나 디렉토리를 삭제하고 대상이 없는 경우에는 메시지를 출력하지 않음
-r	디렉토리 내부의 모든 내용 삭제
-d	비어있는 디렉토리들만 삭제
-i	매번 삭제할때마다 사용자에게 삭제할 것인지 물음
-l	3개 이상의 파일을 삭제하거나 디렉토리 내부가 비어있지 않을때만 삭제할 것인지 물음
-v	삭제되는 대상의 정보를 출력
 
5. ls : 현재 디렉토리에 포함된 모든 파일 및 하위 디렉토리를 출력

명령어	설명
-a	숨겨진 파일이나 디렉토리를 포함 모든 파일 형식을 출력
(숨김처리 파일에는 앞에 .이 붙음)
-A	현재 디렉토리(.)와 상위 디렉토리(..)을 제외한 모든 파일 및 디렉토리를 출력
-b	알파벳 순으로 파일 및 디렉토리를 출력
-B	~로 끝나는 백업파일을 제외하고 목록을 출력
-c	-l 옵션을 같이 사용. 마지막으로 변경된 시간을 목록에 출력
-C	파일이나 디렉토리를 열로 목록을 출력
-d	지정경로에 있는 최상위 디렉토리의 목록만 출력(*/ 디렉토리만 출력)
-D	emacs를 위한 출력행태를 생성
-f	정렬하지 않고 컬러 옵션을 해제하여 출력
-F	파일의 종류를 기호로 구분하여 출력(디렉토리 /, 소켓 =, 실행가능파일 *, 링크 @)
-g	사용자 권한을 출력
-G	-l 과 같이 사용시 그룹권한을 출력하지 않음
-h	human의 줄임말로 K(킬로바이트), M(메가바이트), G(기가바이트) 단위를 사용하여 파일 크기를 사람이 보기 좋게 표시
-H	심볼릭 링크의 실제 참조하는 목록을 출력
-i	각 파일의 인덱스 값을 첫번째 열에 출력한다. (인덱스 : 파일 시스템과 관련한 중요한 자료구조)
-I	지정한 파일 및 디렉토리를 제외하고 출력
-k	용량을 킬로바이트로 출력
-l	자세한 내용을 출력. 내용은 권한, 파일 수, 소유자, 그룹, 파일크기, 수정일자, 파일이름을 의미
    (자세한 내용은 아래 3. 권한설정을 참고)
-lu	mtime(수정시간)과 atime(접근시간)을 출력 (default는 수정시간)
-lc	mtime(수정시간)과 ctime(변경시간)을 출력 (default는 수정시간)
-L	심볼릭 링크의 정보를 출력할 때 원본 파일의 정보를 출력
-m	파일의 출력 형식이 디렉토리 및 파일을 쉼표로 구분하여 출력
-n	사용자와 그룹권한을 UDI와 GID로 표시
-p	디렉토리에 /을 추가
-q	그래픽이 아닌 문자 대신에 ?를 출력
-Q	파일, 디렉토리를 쌍따옴표 안에 출력
-r	reverse의 줄임말로 알파벳 역순으로 출력 (default는 알파벳 순서)
-R	하위 디렉토리까지 출력
-s	각 파일의 할단된 크기를 블록으로 출력
-S	파일크기 순으로 정렬하여 출력
-t	파일이 수정된 시간 기준으로 정렬 출력, 최근 수정된 파일을 맨 위로 정렬시켜 출력
-T	tab 사이즈 별로 출력
-u	-lt 같이 사용시 생성 시간 기준으로 출력하고 -l과 사용시 atime(생성시간) 순으로 정렬 출력
-U	디스크의 저장된 순서대로 파일 나열
-w	width 길이를 설정하여 출력
-x	상세 출력되는 리스트를 열이 아닌 하나의 라인으로 출력
-X	확장자의 알파벳순으로 정렬하여 출력
-Z	SELinux 보안 모듈을 출력
 

6. cd : 현재 작업중인 디렉토리 이동

1) cd.. : 상위 디렉토리로 이동

2) cd../../ : 2단계 상위 디렉토리로 이동

3) cd. : 새로 고침

4) cd- : 이전 티렉토리로 이동

5) cd~ : 디렉토리 홈의 유저로 이동

6) cd/ : 최상위 디렉토리로 이동

7) cd 디렉토리 : 특정 디렉토리로 이동

 

7. mv : 파일/디렉토리 이동, 파일명 변경

1) mv [파일이름1][파일이름2]...[파일이름3][디렉토리1] : 파일들을 디렉토리1로 이동, 여러파일 가능

2) mv [디렉토리1][디렉토리2] : 디렉토리와 디렉토리 내의 파일 전체를 이동

3) mv [파일이름1][파일이름2] : 파일이름1 파일을 파일이름2 파일로 이름을 변경

4) mv [디렉토리1][디렉토리2] : 디렉토리1을 디렉토리2로 이름을 변경

5) mv *.확장자 [디렉토리] : 와일드카드 기호(*)를 사용하면 설정한 파일 확장자에 따른 파일들을 모두 이동
 
8. cat : 여러파일의 내용을 하나로 합쳐주거나, 파일 내용 출력, 파일을 생성하고 저장하는 용도로 사용

명령어	설명
cat > [새파일명] 
내용	후 ctrl + D 를 하면 작성한 내용을 가진 새파일이 생성됨
cat [기존파일] > [새파일명] 	기존파일의 내용을 가진 새파일이 생성됨
cat [기존파일1] >> [기존파일2]
내용  	다른기존파일에 기존파일 내용이 추가 작성됨
cat [기존파일1][기존파일2]... >>  [새파일명]	기존파일1과 2의 내용을 가진 새파일이 생성됨
cat [기존파일1][기존파일2]... >>  [기존파일N]	기존파일N의 내용 아래에 합쳐진 기존파일1,2내용들이 추가로 이어짐
cat [파일1] [파일2]... [파일N]	하나의 파일이나 여러개의 파일을 출력할 수 있다.
명령어	설명
cat -A [파일이름] 	탭, 줄바꿈을 포함한 문자를 표시
탭(^|$)과 줄바꿈($)이 표시
탭 또는 줄 바꿈이 들어가면 안 되는 파일, 소스파일 등 파일의 내용을 검사할 떼 유용
cat -e [파일이름] 	줄바꿈을 표시 ($)
cat -t [파일이름]	탭을 표시 (^I)
cat -s [파일이름]	빈라인이 2줄이상일 경우 표시하지 않음
(한줄 : 한줄만 표시됨)
(2줄이상 : 한줄만 표시됨)
cat -b [파일이름]	빈라인을 제외한 라인앞에 번호를 순차적으로 붙임
cat -n [파일이름]	모든 라인앞에 번호를 순차적으로 붙임
 

9.  cp : 파일/디렉토리 복제, 원본파일은 삭제되지 않음

명령어	설명
cp [파일명1][파일명2]	파일명1의 파일을 똑같이 복사하여 파일명2를 생성한다
cp [파일명1] /[디렉토리]/[파일명2]	파일이름1 파일을 디렉토리 안에 파일이름2라는 이름으로 복사
cp [파일명1][파일명2]...[파일명n][디렉토리]	파일을 디렉토리 안에 복사
한번에 여러 파일을 디렉토리에 복사 가능
cp -r [디렉토리1][디렉토리2]	디렉토리 전체를 복사
 
10. touch : 파일의 날짜/시간 정보 변경, 빈 파일 생성

1) touch [파일명] : 파일생성

2) touch -t [날짜정보][파일명] : 파일의 날짜 정보를 작성한 날짜정보로 변경

3) touch -c [파일명] :기존 파일이 없어도 생성되지 않음, 파일의 날짜정보를 현날짜로 변경

4) touch -r [ 파일명1] [파일명2] : 파일 2의 날짜정보를 파일 1의 날짜정보와 동일하게 변경

11. man : 메뉴얼이라는 뜻으로 리눅스의 명령어를 볼 수 있음

12. vi / vm : 편집기능 명령어

- 추가 내용 : 리눅스 명령어 vi, vim (velog.io)

vi [파일명] : 파일 열기, 작성
vi +[행번호][파일명] : 파일을 열고, 입력한 행으로 커서 이동
vi +/"문자열" [파일명] : "문자열"의 처음발생 단어부터 열기
vi -r [파일명] : 손상된 파일 회복
view [파일명] : 읽기 전용으로 열기
편집기는 명령도드, 입력모드, 마지막 행 모드로 총 3가지 모드로 구성되어 있다. 
흔히 사람들이 말하는 vi 명령어는 이 세가지 모드를 자유자재로 왔다갔다 하면서 코드나 
글을 작성하는 것을 말한다.
 
13. netstat : 네트워크 연결 확인 명령어

- 추가 내용 : 리눅스 명령어 netstat (velog.io)

* netstat [옵션][포트변호 or 서비스명]
nestat(network statistics)는 전송 제어 프로토콜, 라우팅 테이블, 
수많은 네트워크 인터페이스(네트워크 인터페이스 컨트롤러 또는 소프트웨어 정의 네트워크 인터페이스),
네트워크 프로토콜 통계를 위한 네트워크 연결을 보여주는 명령 줄 도구이다. 
네트워크의 문제를 찾아내고 성능 측정으로 네트워크 상의 트래픽의 양을 결졍하기 위해 사용된다.
 
14. chmod : 권한 설정 명령어

- 추가 내용 : 리눅스 명령어 chmod (velog.io)

chmod [옵션][문자 or 숫자조합] [파일 or 디렉토리]

리눅스 파일 시스템에서 파일을 생성시 파일을 생성한 사용자가 파일에 대한 제어를 할 수 있다. 그러나 서비스를 운영하다보면 다른 사용자에게 접근, 읽기, 쓰기 같은 권한을 주어야할 경우가 있다. 다른 사용자에게 접근 권한을 부여할 때 사용되는 명령어가 바로 chmod이다. chmod 명령어는 change와 mode의 앞글자를 조합한 명령어로 파일의 권한을 변경하는 명령어이다. 소유자, 그룹, 익명사용자에게 각각 별도로 지정이 가능하며, 권한을 지정 시 숫자, 알파벳, 기호, 특수문자를 통해 설정할 수 있다. 기본적으로 파일 및 디렉토리의 모드 비트를 변경하므로 모드의 종류와 사용법을 익혀야 한다.

15. grep : 문자열 찾는 명령어

- 추가 내용 : 리눅스 명령어 grep (velog.io)
- grep [옵션][패턴][파일명]

리눅스에서 grep 명령어는 입력으로 전달된 파일의 내용에서 특정 문자열을 찾고자할 때 
사용하는 명령어이다. 하지만 grep 명령어가 단순히 문자열이 일치하는지 여부만을 검사하는 
것은 아니라 문자열이 같은지만 정규 표현식에 의한 패턴 매칭 방식을 사용하여 검사하는 수준을 
넘어 훨씬 복잠하고 다양한 방식으로 매우 효율적으로 문자열을 찾는 기능을 제공한다. 
다른 명령어와 조합하여 응용되는 경우가 많아서 이 grep명령어는 리눅스에서 능숙하게 사용할 줄
알아야 하는 기본 명령어이다.
 

16. echo : 텍스트 출력, 주로 스크립트 파일에서 메시지를 출력하거나 변수의 값을 표시하고 디버깅할 때 유용하게 사용

1) echo [옵션][텍스트 및 문자열] : 큰  따옴표 없이도 문자 출력이 가능하며, 특수 문자 또는 긴 문자를 표현 할 경우 큰따옴표(" ")를 이용

root@server # echo (My name is Kim)
-bach : syntax error near unexpected token `My'

root@server # echo "(My name is Kim)"
(My name is Kim)
2) echo "내용" > (파일명) : 해당 경로에 파일명 미존재 할 경우 echo 출력 내용으로 새로운 파일 생성, 해당 경로에 파일명 존재 할 경우 echo 출력 내용으로 파일을 덮어쓰기로 저장
3) echo "내용" >> (파일명) : 해당 경로에 파일명 미존재 할 경우 echo 출력 내용으로 새로운 파일 생성, 해당 경로에 파일명 존재 할 경우 echo 출력 내용으로 파일을 이어쓰기로 저장

 

17. sort :  파일 정렬

- $ sort file.txt :  file.txt 파일의 내용을 알파벳 순서로 정렬 

1) -r 또는 --reverse: 역순으로 정렬

2) -n 또는 --numeric-sort: 숫자로 정렬

- $ sort -rn numbers.txt : numbers.txt 파일의 내용을 숫자로 내림차순으로 정렬

3) -f 또는 --ignore-case: 대소문자를 구분하지 않고 정렬
4) -k 또는 --key: 특정 필드를 기준으로 정렬. 예를 들어, -k 2로 지정하면 두 번째 필드를 기준으로 정렬
5) -t 또는 --field-separator: 필드 구분자를 정의. 기본값은 공백

- $ sort -k 2 -t ',' data.csv : data.csv 파일의 내용을 두 번째 필드를 기준으로 정렬. 필드 구분자로는 쉼표(,)를 사용

 

18. history : 이전에 실행했던 명령어 조회

명령어	설명
-c	RAM에 있는 history list를 클리어 즉 삭제합니다. 
-d	history 명령어 치면 첫 번째 열에 offset이 있는데 offset 위치에 있는 history 명령어를 삭제합니다.
-a	history list에 있는 내용들을 파일에다가 추가합니다. (원래 종료될때 추가되는걸 지금 추가)
-n	히스토리 파일로부터 이미 읽혀지지 않은 라인들을 읽고 history list에다가 추가합니다. 
-r	히스토리 파일을 읽고 history list에다가 내용을 추가합니다.
-w	현재 history를 히스토리 파일에 씁니다. 
